import os
import database
import logging
from logging.handlers import RotatingFileHandler
import configparser
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    JobQueue,
    PicklePersistence
)
import sqlite3
from datetime import datetime, timedelta, time

import improved_logger as ilg

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        ilg.TimestampedRotatingFileHandler(
            "bot.log",
            maxBytes=5*1024*1024,  # 5 MB
            backupCount=20,
            # encoding="utf-8"
        ),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

config = configparser.ConfigParser()
config.read('bot_config.ini', encoding='utf-8')

TOKEN = config['Main']['TOKEN']
admin_url = config['Main']['HELP_ACCOUNT']
hours_to_remind = (int)(config['Main']['HOURS_REMINDER'])
delay_to_send_notification = (int)(config['Main']['NOTIFICATION_DELAY_SEC'])

try:
    ADMIN_IDS = [
        int(admin_id.strip())
        for admin_id in config.get('Main', 'ADMIN_ID').split(',')
        if admin_id.strip().isdigit()
    ]
except (configparser.NoOptionError, configparser.NoSectionError):
    ADMIN_IDS = []

DATABASE_NAME = config['Main']['DATABASE_NAME']

# –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
try:
    os.remove(os.path.join(os.path.dirname(__file__), "conversationbot"))
except FileNotFoundError:
    pass

persistence = PicklePersistence(filepath="conversationbot")

USER_COMMANDS = [
    ("üìÜ –í—ã–±—Ä–∞—Ç—å —Å–µ—Å—Å–∏—é", "events"),
    ("üßë‚Äçüíª –ú–æ–∏ –∑–∞–ø–∏—Å–∏", "myevents"),
    ("‚ÑπÔ∏è –ú–µ–Ω—é", "menu"),
    ("ü©π –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å", "help") 
]

ADMIN_COMMANDS = USER_COMMANDS + [
    ("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏", "adminevents"),
    ("‚ûï –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é", "createevent")
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    CREATE_MAX, CREATE_END, CREATE_TIME, CREATE_INFO,
    EDIT_CHOICE, EDIT_VALUE, DELETE_CONFIRM,
    WAITING_FOR_MESSAGE, WAITING_FOR_LINK, CONFIRM_LINK,
    REMOVE_USER_START, REMOVE_USER_SELECT
) = range(12)


def build_main_menu_keyboard(is_admin: bool) -> InlineKeyboardMarkup:
    commands = ADMIN_COMMANDS if is_admin else USER_COMMANDS
    buttons = [InlineKeyboardButton(text, callback_data=cmd) for text, cmd in commands]
    keyboard = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
    return InlineKeyboardMarkup(keyboard)


def error_logger(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            return await func(update, context)
        except Exception as e:
            try:
                # –ß–∞—Å—Ç–∏—á–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if context.user_data:
                    context.user_data.clear()
                if context.chat_data:
                    context.chat_data.clear()
                logger.error(f"Error in {func.__name__}: {str(e)}", exc_info=True)
            except Exception as clear_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(clear_error)}")

            await error_handler(update, context)
    return wrapper


def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


# def get_message_from_file(filename: str, default_text: str) -> str:
#     try:
#         with open(f"misc/{filename}", "r", encoding="utf-8") as f:
#             return f.read().strip()
#     except FileNotFoundError:
#         return default_text


global db
db = None


# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    try:
        event_id = context.job.data
        event = db.get_event_by_id(event_id)

        if not event:
            logger.error(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
        event_time = datetime.strptime(event['event_time'], "%H:%M").strftime("%H:%M")

        try:
            with open("misc/message.txt", "r", encoding="utf-8") as f:
                template = f.read()
            if "{event_time}" not in template:
                template += "\n–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {event_time}"
        except FileNotFoundError:
            template = (
                "–ü—Ä–∏–≤–µ—Ç!\n"
                "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è –≤ {event_time}.\n"
            )

        message_text = template.format(event_time=event_time)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        participants = db.get_event_participant_ids(event_id)
        for user_id in participants:
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message_text
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {str(e)}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_reminder: {str(e)}", exc_info=True)


async def send_delayed_notification(context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = context.job.data["user_id"]
        message_text = context.job.data["message_text"]
        await context.bot.send_message(chat_id=user_id, text=message_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def check_admin_access(update: Update) -> bool:
    user = update.effective_user
    if not is_admin(user.id):
        message = update.message or update.callback_query.message
        await message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return False
    return True


@error_logger
async def reset_persistence(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_admin(update.effective_user.id):
        await context.application.persistence.drop_user_data()
        await context.application.persistence.drop_chat_data()
        await update.message.reply_text("‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ persistence —Å–±—Ä–æ—à–µ–Ω—ã")


@error_logger
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    logger.info(f"User {user.id} canceled the conversation. Clearing user_data: {context.user_data}")
    context.user_data.clear()
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


@error_logger
async def cancel_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚úñÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    context.user_data.clear()
    return ConversationHandler.END


@error_logger
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global admin_url
    keyboard = [
        [InlineKeyboardButton(
            "‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", 
            url=admin_url
        )]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = (
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, "
        "—á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞–ø—Ä—è–º—É—é:"
    )
    
    await (update.message or update.callback_query.message).reply_text(
        message_text,
        reply_markup=reply_markup
    )


@error_logger
async def show_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        events = db.get_all_events()
        message = update.message or update.callback_query.message
        user = update.effective_user
        is_admin_user = is_admin(user.id)

        if not events:
            await message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
            return

        keyboard = []
        for event in events:
            event_id, max_p, end_date, event_time, info, current = event
            available = max_p - current
            formatted_date = datetime.strptime(end_date, "%Y-%m-%d").strftime("%d.%m.%Y")
            event_text = (
                f"{formatted_date} {event_time} | {available}/{max_p} | {info}"
                if is_admin_user
                else f"{formatted_date} {event_time} | {info}"
            )
            keyboard.append([InlineKeyboardButton(event_text, callback_data=f"event_{event_id}")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            with open("misc/events_info.txt", "r", encoding="utf-8") as f:
                text = f.read()
        except FileNotFoundError:
            text = "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:"

        await message.reply_text(text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_events: {str(e)}", exc_info=True)
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")


@error_logger
@error_logger
async def event_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("event_"):
        event_id = int(query.data.split("_")[1])
        available = db.check_available_slots(event_id)

        if available > 0:
            success = db.register_user(
                query.from_user.id,
                query.from_user.username,
                event_id
            )

            if success:
                await query.edit_message_text(
                    f"‚úÖ –¢—ã –∑–∞–ø–∏—Å–∞–Ω(–∞) –Ω–∞ —Å–µ—Å—Å–∏—é!" #–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {available - 1} 
                )
            else:
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_unreg_{event_id}"),
                        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_unreg")
                    ]
                ]
                await query.edit_message_text(
                    "‚ö†Ô∏è –¢—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω(–∞) –Ω–∞ —ç—Ç—É —Å–µ—Å—Å–∏—é. –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        else:
            await query.edit_message_text("‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã!")


async def handle_back_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await admin_events(update, context)


@error_logger
async def admin_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("view_"):
        event_id = int(query.data.split("_")[1])

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        event = db.get_event_by_id(event_id)
        if not event:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        formatted_date = datetime.strptime(event['end_date'], "%Y-%m-%d").strftime("%d.%m.%Y")
        event_time = event['event_time']

        message_text = (
            f"üìå ID —Å–µ—Å—Å–∏–∏: {event_id}\n"
            f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {event_time}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {event['current_participants']}/{event['max_participants']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {event['info'] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
            "üóí –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
        )

        participants = db.get_event_participants(event_id)
        if participants:
            message_text += "\n".join([f"‚Ä¢ @{username}" for username in participants])
        else:
            message_text += "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

        keyboard = [
            [
                InlineKeyboardButton("üì® –°–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"sendmsg_{event_id}"),
                InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞", callback_data=f"sendlink_{event_id}")
            ],
            [
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"removeuser_{event_id}"),
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="adminevents")
            ]
        ]
        await query.edit_message_text(
            text=message_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data.startswith("delete_"):
        event_id = int(query.data.split("_")[1])
        context.user_data['delete_event_id'] = event_id
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_delete")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_delete")]
        ]
        await query.edit_message_text(
            "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return DELETE_CONFIRM
    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")


@error_logger
@error_logger
async def handle_unregistration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        if query.data.startswith("confirm_unreg_"):
            event_id = int(query.data.split("_")[-1])  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ ID
            user_id = query.from_user.id
            
            if db.delete_registration(user_id, event_id):
                await query.edit_message_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
                await show_events(update, context)
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

        elif query.data == "cancel_unreg":
            await query.edit_message_text("‚úñÔ∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_unregistration: {str(e)}", exc_info=True)
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")


@error_logger
async def send_message_to_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not await check_admin_access(update):
        return ConversationHandler.END

    event_id = int(query.data.split('_')[1])
    context.user_data['sendmsg_event_id'] = event_id

    await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
    return WAITING_FOR_MESSAGE


async def send_link_to_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not await check_admin_access(update):
        return ConversationHandler.END

    event_id = int(query.data.split('_')[1])
    context.user_data['sendlink_event_id'] = event_id

    await query.edit_message_text("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
    return WAITING_FOR_LINK


@error_logger
async def confirm_link_sending(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    event_id = context.user_data.get('sendlink_event_id')
    participants = db.get_event_participant_ids(event_id)

    participants = [uid for uid in participants if uid not in ADMIN_IDS]

    message_text = context.user_data.get('generated_message', "–°—Å—ã–ª–∫–∞: {link}").format(
        link=context.user_data.get('link', '')
    )

    success, failed = 0, 0
    for user_id in participants:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=message_text,
                disable_web_page_preview=False
            )
            success += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
            failed += 1

    await query.edit_message_text(
        f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}"
    )
    return ConversationHandler.END


@error_logger
async def process_link_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    link = update.message.text
    context.user_data['link'] = link

    try:
        with open("misc/link-template.txt", "r", encoding="utf-8") as f:
            template = f.read()
    except FileNotFoundError:
        template = "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {link}"

    message_text = template.format(link=link)
    context.user_data['generated_message'] = message_text

    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_link")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_link")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n\n{message_text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
        reply_markup=reply_markup
    )
    return CONFIRM_LINK


@error_logger
async def send_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text
    event_id = context.user_data.get('sendmsg_event_id')
    participant_ids = db.get_event_participant_ids(event_id)

    participant_ids = [uid for uid in participant_ids if uid not in ADMIN_IDS]

    success, failed = 0, 0
    for user_id in participant_ids:
        try:
            await context.bot.send_message(chat_id=user_id, text=message_text)
            success += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1

    await update.message.reply_text(
        f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}"
    )
    context.user_data.clear()
    return ConversationHandler.END


@error_logger
async def remove_user_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    event_id = int(query.data.split("_")[1])
    context.user_data["current_event_id"] = event_id

    participants = db.get_event_participants(event_id)

    if not participants:
        await query.edit_message_text("‚ùå –í —ç—Ç–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton(f"@{username}", callback_data=f"remove_{username}")]
        for username in participants
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

    return REMOVE_USER_SELECT


@error_logger
async def remove_user_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    username = query.data.split("_")[1]
    event_id = context.user_data["current_event_id"]
    user_id = db.get_user_id_by_username(username)

    if user_id:
        db.delete_registration(user_id, event_id)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–º
        try:
            with open("misc/user_banned.txt", "r", encoding="utf-8") as f:
                message_text = f.read().strip()
        except FileNotFoundError:
            message_text = "–¢–µ–±—è —É–¥–∞–ª–∏–ª–∏"

        try:
            await context.bot.send_message(chat_id=user_id, text=message_text)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {str(e)}")

        await query.edit_message_text(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ @{username} —É–¥–∞–ª–µ–Ω!")
    else:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return ConversationHandler.END


@error_logger
async def confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    event_id = context.user_data.get('delete_event_id')
    if not event_id:
        await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    try:
        db.delete_event(event_id)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö jobs
        job_name = f"reminder_{event_id}"
        for job in context.job_queue.jobs():
            if job.name == job_name:
                job.schedule_removal()
        
        logger.info(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id} —É–¥–∞–ª–µ–Ω–æ. Jobs –æ—á–∏—â–µ–Ω—ã.")
        await query.edit_message_text("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event_id}: {str(e)}")
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")

    finally:
        context.user_data.clear()
        return ConversationHandler.END


@error_logger
async def create_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_admin_access(update):
        return ConversationHandler.END

    context.user_data.clear()
    
    try:
        query = update.callback_query
        if query:
            await query.answer()
            message = query.message
        else:
            message = update.message
        
        await message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
        return CREATE_MAX
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_event: {str(e)}")
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.")
        context.user_data.clear()
        return ConversationHandler.END


@error_logger
async def create_max(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        max_p = int(update.message.text)
        if max_p <= 0:
            raise ValueError
        context.user_data['event_max'] = max_p
        logger.info(f"Received max participants: {max_p}")

        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):")
        return CREATE_END
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return CREATE_MAX


@error_logger
async def create_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time_str = update.message.text
    try:
        event_time = datetime.strptime(time_str, "%H:%M").time()
        context.user_data['event_time'] = time_str

        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
        return CREATE_INFO

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
        return CREATE_TIME


@error_logger
async def create_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        info = update.message.text
        context.user_data["info"] = info

        if "event_max" not in context.user_data:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
            return ConversationHandler.END

        if "end_date" not in context.user_data:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!")
            return ConversationHandler.END

        if "event_time" not in context.user_data:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!")
            return ConversationHandler.END

        max_p = context.user_data["event_max"]
        end_date = context.user_data["end_date"].strftime("%Y-%m-%d")  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É
        event_time = context.user_data["event_time"]

        event_id = db.add_event(max_p, end_date, event_time, info)  # –í—Å–µ 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞!

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        event_datetime = datetime.combine(
            context.user_data["end_date"],
            datetime.strptime(event_time, "%H:%M").time()
        )
        reminder_time = event_datetime - timedelta(hours=hours_to_remind)

        if reminder_time > datetime.now():
            delta = (reminder_time - datetime.now()).total_seconds()
            context.job_queue.run_once(
                send_reminder,
                when=delta,
                data=event_id,
                name=f"reminder_{event_id}"
            )

        await update.message.reply_text("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_info: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        return ConversationHandler.END


@error_logger
async def create_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Received end date: {update.message.text}")
    try:
        end_date = datetime.strptime(update.message.text, "%Y-%m-%d").date()
        today = datetime.now().date()

        if end_date < today:
            await update.message.reply_text("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!")
            return CREATE_END

        context.user_data['end_date'] = end_date
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        return CREATE_TIME
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        return CREATE_END


@error_logger
async def admin_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not await check_admin_access(update):
            return

        # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        context.user_data.clear()
        
        events = db.get_all_events()

        if not events:
            message = update.message or update.callback_query.message
            await message.reply_text("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
            return

        keyboard = []
        for event in events:
            event_id, max_p, end_date, event_time, info, current = event
            available = max_p - current

            day_month = end_date.split("-")[2] + "." + end_date.split("-")[1]
            event_text = f"{day_month} {event_time}"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
            keyboard.append([
                InlineKeyboardButton(
                    event_text,
                    callback_data=f"view_{event_id}"
                ),
                InlineKeyboardButton("‚úèÔ∏è", callback_data=f"edit_{event_id}"),
                InlineKeyboardButton("‚ùå", callback_data=f"delete_{event_id}")
            ])

        reply_markup = InlineKeyboardMarkup(keyboard)
        message = update.message or update.callback_query.message
        await message.reply_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏:", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_events (User {update.effective_user.id}): {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é.")
        context.user_data.clear()


@error_logger
async def my_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        events = db.get_user_events(user_id)
        message = update.message or update.callback_query.message

        if not events:
            await message.reply_text("üì≠ –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞) –Ω–∏ –Ω–∞ –æ–¥–Ω—É —Å–µ—Å—Å–∏—é!")
            return

        keyboard = []

        for event in events:
            try:
                if len(event) < 4:
                    continue

                event_id, end_date, event_time, info = event
                info_display = info[:20] + "..." if len(info) > 20 else info

                formatted_date = datetime.strptime(end_date, "%Y-%m-%d").strftime("%d.%m.%Y")
                
                # –ö–Ω–æ–ø–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
                btn_text = f"{formatted_date} {event_time} | {info_display}"
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                keyboard.append([
                    InlineKeyboardButton(btn_text, callback_data=f"detail_{event_id}"),
                    InlineKeyboardButton("‚ùå", callback_data=f"cancel_{event_id}")
                ])

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event}: {str(e)}", exc_info=True)
                continue

        if not keyboard:
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
            return

        await message.reply_text(
            "üìå –¢–≤–æ–∏ —Å–µ—Å—Å–∏–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ my_events: {str(e)}", exc_info=True)
        await message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")


@error_logger
async def show_event_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    event_id = int(query.data.split("_")[1])
    event = db.get_event_by_id(event_id)
    
    if not event:
        await query.edit_message_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    formatted_date = datetime.strptime(event['end_date'], "%Y-%m-%d").strftime("%d.%m.%Y")
    message_text = (
        f"üìå –î–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–∏:\n\n"
        f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {event['event_time']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {event['info'] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        f"–°—Ç–∞—Ç—É—Å: ‚úÖ –ó–∞–ø–∏—Å–∞–Ω"
    )
    
    await query.edit_message_text(message_text)


@error_logger
async def cancel_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    event_id = int(query.data.split("_")[1])
    user_id = update.effective_user.id
    db.delete_registration(user_id, event_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        with open("misc/user_leaved.txt", "r", encoding="utf-8") as f:
            message_text = f.read().strip()
    except FileNotFoundError:
        message_text = "–¢—ã —É–¥–∞–ª–∏–ª—Å—è"

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    context.job_queue.run_once(
        callback=send_delayed_notification,
        when=delay_to_send_notification,  # 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
        data={
            "user_id": user_id,
            "message_text": message_text
        },
        name=f"delayed_msg_{user_id}_{datetime.now().timestamp()}"
    )

    await query.edit_message_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    await my_events(update, context)



@error_logger
async def edit_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    context.user_data.clear()
    
    try:
        event_id = int(query.data.split("_")[1])
        context.user_data['edit_event_id'] = event_id
        
        keyboard = [
            [InlineKeyboardButton("–ú–∞–∫—Å. —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="field_max_participants")],
            [InlineKeyboardButton("–î–∞—Ç–∞ —Å–µ—Å—Å–∏–∏", callback_data="field_end_date")],
            [InlineKeyboardButton("–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏", callback_data="field_event_time")],
            [InlineKeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="field_info")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
        return EDIT_CHOICE
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_event_start: {str(e)}", exc_info=True)
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        context.user_data.clear()
        return ConversationHandler.END
    

@error_logger
async def edit_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        _, field = query.data.split('_', 1)
        context.user_data['edit_field'] = field

        event_id = context.user_data.get('edit_event_id')
        if not event_id:
            await query.edit_message_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ!")
            return ConversationHandler.END

        event = db.get_event_by_id(event_id)
        if not event:
            await query.edit_message_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return ConversationHandler.END

        field_data = {
            'max_participants': ('–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', event['max_participants']),
            'end_date': ('–¥–∞—Ç—É —Å–µ—Å—Å–∏–∏', event['end_date']),
            'event_time': ('–≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏', event['event_time']),
            'info': ('–æ–ø–∏—Å–∞–Ω–∏–µ', event['info'])
        }

        if field not in field_data:
            await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return ConversationHandler.END

        field_name, current_value = field_data[field]
        message_text = (
            f"–¢–µ–∫—É—â–µ–µ {field_name}:\n"
            f"`{current_value}`\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
        )

        await query.edit_message_text(
            message_text,
            parse_mode="MarkdownV2"  # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        )
        return EDIT_VALUE

    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback_data: {query.data} -> {str(e)}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_choice: {str(e)}", exc_info=True)
        await query.edit_message_text("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
        return ConversationHandler.END


@error_logger
async def edit_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_data = context.user_data
        field = user_data.get("edit_field")
        value = update.message.text.strip()
        event_id = user_data.get("edit_event_id")
        user_id = update.effective_user.id

        if not all([field, event_id]):
            logger.error(f"User {user_id}: –ü—Ä–æ–ø—É—â–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ user_data!")
            await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            context.user_data.clear()
            return ConversationHandler.END

        event = db.get_event_by_id(event_id)
        if not event:
            await update.message.reply_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return ConversationHandler.END

        if field == "max_participants":
            try:
                new_max = int(value)
                if new_max < event["current_participants"]:
                    await update.message.reply_text(
                        f"‚ö†Ô∏è –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω—å—à–µ {event['current_participants']} (—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏)!"
                    )
                    return EDIT_VALUE
                db.update_event_field(event_id, field, new_max)
                await update.message.reply_text("‚úÖ –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!")

            except ValueError:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
                return EDIT_VALUE

        elif field == "end_date":
            try:
                parsed_date = datetime.strptime(value, "%Y-%m-%d").date()
                if parsed_date < datetime.now().date():
                    await update.message.reply_text("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!")
                    return EDIT_VALUE
                db.update_event_field(event_id, field, value)
                await update.message.reply_text("‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

            except ValueError:
                await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î")
                return EDIT_VALUE

        elif field == "event_time":
            try:
                datetime.strptime(value, "%H:%M")  # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
                db.update_event_field(event_id, field, value)
                await update.message.reply_text("‚úÖ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

            except ValueError:
                await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú")
                return EDIT_VALUE

        elif field == "info":
            if len(value) > 500:
                await update.message.reply_text("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤)")
                return EDIT_VALUE
            db.update_event_field(event_id, "info", value)
            await update.message.reply_text("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if field in ("end_date", "event_time"):
            event = db.get_event_by_id(event_id)
            end_date = datetime.strptime(event["end_date"], "%Y-%m-%d").date()
            event_time = datetime.strptime(event["event_time"], "%H:%M").time()
            event_datetime = datetime.combine(end_date, event_time)
            reminder_time = event_datetime - timedelta(hours=hours_to_remind)

            job_name = f"reminder_{event_id}"
            for job in context.job_queue.jobs():
                if job.name == job_name:
                    job.schedule_removal()

            if reminder_time > datetime.now():
                delta = (reminder_time - datetime.now()).total_seconds()
                context.job_queue.run_once(
                    send_reminder,
                    when=delta,
                    data=event_id,
                    name=job_name
                )
                logger.info(f"üîÑ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {event_id} –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_value (User {update.effective_user.id}): {str(e)}", exc_info=True)
        await update.message.reply_text("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.")
        context.user_data.clear()
        return ConversationHandler.END

    finally:
        # –í—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º admin_events –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        await admin_events(update, context)
        context.user_data.clear()


@error_logger
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    is_admin_user = is_admin(user.id)
    
    reply_markup = build_main_menu_keyboard(is_admin_user)

    try:
        with open("misc/hello2.txt", "r", encoding="utf-8") as f:
            text = f.read()
    except FileNotFoundError:
        text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    message = update.message or update.callback_query.message
    await message.reply_text(text, reply_markup=reply_markup)


@error_logger
async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        message = update.callback_query.message
        user = update.callback_query.from_user
    else:
        message = update.message
        user = update.effective_user

    menu_text = [
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "/events - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏",
        "/myevents - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–ø–∏—Å–∏",
        "/menu - –ó–∞–π—Ç–∏ –≤ –º–µ–Ω—é",
        "/help - –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å!"
    ]

    if is_admin(user.id):
        menu_text.extend([
            "\n‚öôÔ∏è –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:",
            "/adminevents - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏",
            "/createevent - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"
        ])

    menu_text.append("\n‚ÑπÔ∏è –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã!")

    reply_markup = build_main_menu_keyboard(is_admin(user.id))
    await message.reply_text("\n".join(menu_text), reply_markup=reply_markup)


@error_logger
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        logging.info(f"User {query.from_user.id} pressed button: {query.data}")

        command = query.data
        user_id = query.from_user.id

        if command == "menu":
            await menu_command(update, context)
        elif command == "events":
            await show_events(update, context)
        elif command == "myevents":
            await my_events(update, context)
        elif command == "help":
            await help_command(update, context)
            return
        elif command == "adminevents":
            if user_id in ADMIN_IDS:
                await admin_events(update, context)
            else:
                await query.edit_message_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        elif command == "createevent":
            if user_id in ADMIN_IDS:
                await create_event(update, context)
            else:
                await query.edit_message_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        elif command.startswith("sendmsg_"):
            await send_message_to_participants(update, context)
            return
        else:
            await query.edit_message_text("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")

    except Exception as e:
        logging.error(f"Error: {str(e)}", exc_info=True)
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@error_logger
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –°–±—Ä–æ—Å persistence –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
        await context.application.persistence.drop_user_data()
        await context.application.persistence.drop_chat_data()
        if update.message:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
        elif update.callback_query:
            await update.callback_query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
    except Exception as e:
        logger.error(f"Error in error handler: {str(e)}")


@error_logger
async def cancel_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚úñÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END


async def restore_reminders(context: ContextTypes.DEFAULT_TYPE):
    try:
        db = database.Database(DATABASE_NAME)
        events = db.get_all_events()

        for event in events:
            event_id = event[0]
            end_date_str = event[2]
            event_time_str = event[3]

            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            end_date = datetime.strptime(end_date_str, "%Y-%m-%d").date()
            event_time = datetime.strptime(event_time_str, "%H:%M").time()
            event_datetime = datetime.combine(end_date, event_time)
            reminder_time = event_datetime - timedelta(hours=hours_to_remind)

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –≤—Ä–µ–º—è –∞–∫—Ç—É–∞–ª—å–Ω–æ
            if reminder_time > datetime.now():
                delta = (reminder_time - datetime.now()).total_seconds()
                context.job_queue.run_once(
                    send_reminder,
                    when=delta,
                    data=event_id,
                    name=f"reminder_{event_id}"
                )
                logger.info(f"‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {event_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", exc_info=True)
        await context.application.persistence.drop_user_data()
        await context.application.persistence.drop_chat_data()
        logger.info("–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å persistence –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")


def main():
    global db
    db = database.Database(DATABASE_NAME)

    application = (
        Application.builder()
        .token(TOKEN)
        .persistence(persistence)
        .build()
    )

    # application.persistence.drop_user_data()
    # application.persistence.drop_chat_data()
    # logger.info("–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.")

    application.job_queue.run_once(
        callback=restore_reminders,
        when=5,
        name="init_restore"
    )

    application.add_error_handler(error_handler)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CommandHandler("events", show_events))
    application.add_handler(CommandHandler("myevents", my_events))
    application.add_handler(CommandHandler("help", help_command))

    application.add_handler(CommandHandler("reset_persistence", reset_persistence))

    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("adminevents", admin_events))

    create_event_conv = ConversationHandler(
        entry_points=[
            CommandHandler("createevent", create_event),
            CallbackQueryHandler(create_event, pattern="^createevent$")
        ],
        states={
            CREATE_MAX: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_max)],
            CREATE_END: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_end)],
            CREATE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_time)],
            CREATE_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_info)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        persistent=True,
        name="create_event_conv"
    )
    application.add_handler(create_event_conv)

    edit_event_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(edit_event_start, pattern=r"^edit_\d+$")
        ],
        states={
            EDIT_CHOICE: [
                CallbackQueryHandler(edit_choice, pattern=r"^field_(max_participants|end_date|event_time|info)$")
            ],
            EDIT_VALUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_value)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_edit),
            CallbackQueryHandler(cancel_edit, pattern="^cancel_edit$")
        ],
        map_to_parent={  # –í–∞–∂–Ω–æ: –≤–æ–∑–≤—Ä–∞—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π ConversationHandler
            ConversationHandler.END: ConversationHandler.END
        },
        persistent=True,
        name="edit_event_conv"
    )
    application.add_handler(edit_event_conv)

    delete_event_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(admin_actions, pattern=r"^delete_\d+$")
        ],
        states={
            DELETE_CONFIRM: [
                CallbackQueryHandler(confirm_delete, pattern="^confirm_delete$"),
                CallbackQueryHandler(cancel_edit, pattern="^cancel_delete$")
            ]
        },
        fallbacks=[],
        map_to_parent={ConversationHandler.END: ConversationHandler.END},
        name="delete_event_conv",
        persistent=True
    )
    application.add_handler(delete_event_conv)

    send_message_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(
                send_message_to_participants,
                pattern=r"^sendmsg_\d+$"  # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è sendmsg_ + —Ü–∏—Ñ—Ä—ã
            )
        ],
        states={
            WAITING_FOR_MESSAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, send_message_handler)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        persistent=True,
        name="send_message_conv"
    )
    application.add_handler(send_message_conv)

    send_link_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(send_link_to_participants, pattern=r"^sendlink_\d+$")
        ],
        states={
            WAITING_FOR_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_link_input)],
            CONFIRM_LINK: [CallbackQueryHandler(confirm_link_sending, pattern="^confirm_link$")]
        },
        fallbacks=[
            CallbackQueryHandler(lambda u, c: cancel_link(u, c), pattern="^cancel_link$")
        ],
        map_to_parent={ConversationHandler.END: ConversationHandler.END},
        persistent=True,
        name="send_link_conv"
    )
    application.add_handler(send_link_conv)

    remove_user_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(remove_user_start, pattern=r"^removeuser_\d+$")
        ],
        states={
            REMOVE_USER_SELECT: [
                CallbackQueryHandler(remove_user_finish, pattern=r"^remove_")
            ],
        },
        fallbacks = [CommandHandler("cancel", cancel)]
    )
    application.add_handler(remove_user_conv)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(handle_unregistration, pattern=r"^(confirm_unreg_\d+|cancel_unreg)$"))
    application.add_handler(CallbackQueryHandler(event_button, pattern="^event_"))
    application.add_handler(CallbackQueryHandler(edit_event_start, pattern="^edit_"))
    application.add_handler(CallbackQueryHandler(show_event_details, pattern="^detail_"))
    application.add_handler(CallbackQueryHandler(cancel_registration, pattern="^cancel_"))

    application.add_handler(
        CallbackQueryHandler(admin_actions, pattern=r"^delete_\d+$")
    )
    application.add_handler(
        CallbackQueryHandler(admin_actions, pattern=r"^view_\d+$")
    )
    application.add_handler(CallbackQueryHandler(send_message_to_participants, pattern=r"^sendmsg_\d+$"))
    application.add_handler(CallbackQueryHandler(menu_handler))
    application.add_handler(CallbackQueryHandler(handle_back_button, pattern="^adminevents$"))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()