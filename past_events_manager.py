import sqlite3
from datetime import datetime

DATABASE_NAME = "events.db"


def get_events(show_all=False, hours=6):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    query = '''
        SELECT 
            e.id,
            e.max_participants,
            e.end_date,
            e.event_time,
            e.info,
            COUNT(r.user_id) as participants,
            datetime(e.end_date || ' ' || e.event_time) as event_datetime
        FROM events e
        LEFT JOIN registrations r ON e.id = r.event_id
    '''

    params = ()
    if not show_all:
        query += " WHERE datetime(e.end_date || ' ' || e.event_time) <= datetime('now', ?)"
        params = (f"-{hours} hours",)

    query += " GROUP BY e.id ORDER BY event_datetime DESC"

    cursor.execute(query, params)
    events = cursor.fetchall()
    conn.close()
    return events


def delete_event(event_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        cursor.execute("SELECT id FROM events WHERE id = ?", (event_id,))
        if not cursor.fetchone():
            print(f"‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        cursor.execute("DELETE FROM events WHERE id = ?", (event_id,))
        cursor.execute("DELETE FROM registrations WHERE event_id = ?", (event_id,))
        conn.commit()
        print(f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id} –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
    finally:
        conn.close()


def main():
    while True:
        print("\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å—Ç–∞—Ä—à–µ 6 —á–∞—Å–æ–≤")
        print("3. –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
        print("4. –í—ã—Ö–æ–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

        if choice == "1":
            events = get_events(show_all=True)
            print_events(events, "–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")

        elif choice == "2":
            events = get_events(show_all=False)
            print_events(events, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å—Ç–∞—Ä—à–µ 6 —á–∞—Å–æ–≤:")

        elif choice == "3":
            event_id = input("–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
            if not event_id.isdigit():
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")
                continue
            delete_event(int(event_id))

        elif choice == "4":
            break

        else:
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!")


def print_events(events, header):
    if not events:
        print("\n‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    print(f"\n{header}")
    for event in events:
        status = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if datetime.fromisoformat(event[6]) > datetime.now() else "üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        print(f"\nID: {event[0]} | {status}")
        print(f"–î–∞—Ç–∞: {event[2]} {event[3]}")
        print(f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {event[5]}/{event[1]}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {event[4]}")


if __name__ == "__main__":
    main()